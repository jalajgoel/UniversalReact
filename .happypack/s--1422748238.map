{"version":3,"sources":["shared/components/DemoApp/AsyncPostsRoute/Post/Post.js"],"names":["Post","PostActions","FromState","post","title","body","mapStateToProps","state","match","getPostById","params","id","mapActionsToProps","fetchPost","fetch","work","shouldWorkAgain","prevProps","nextProps","propTypes","shape","defaultProps"],"mappings":";;;;;;QASgBA,I,GAAAA,I;;AAThB;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;IAAYC,W;;AACZ;;IAAYC,S;;;;;;AAEL,SAASF,IAAT,CAAc,EAAEG,IAAF,EAAd,EAAwB;AAC7B,MAAI,CAACA,IAAL,EAAW;AACT;AACA;AACA;AACA,WAAO,IAAP;AACD;;AAED,QAAM,EAAEC,KAAF,EAASC,IAAT,KAAkBF,IAAxB;;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,2DAAQ,OAAQ,WAAUC,KAAM,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACGA;AADH,KAHF;AAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACGC;AADH;AANF,GADF;AAYD;;AAED,SAASC,eAAT,CAAyBC,KAAzB,EAAgC,EAAEC,KAAF,EAAhC,EAA2C;AACzC,SAAO;AACLL,UAAMD,UAAUO,WAAV,CAAsBF,KAAtB,EAA6BC,MAAME,MAAN,CAAaC,EAA1C;AADD,GAAP;AAGD;;AAED,MAAMC,oBAAoB;AACxBC,aAAWZ,YAAYa;AADC,CAA1B;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;kBACe,oBACb,yBAAQR,eAAR,EAAyBM,iBAAzB,CADa,EAEb,wBAAQ;AACNG,QAAM,CAAC,EAAEP,KAAF,EAASL,IAAT,EAAeU,SAAf,EAAD,KAAgC;AACpC,QAAIV,IAAJ,EAAU;AACR;AACA,aAAO,IAAP;AACD;;AAED;AACA;AACA,WAAOU,UAAUL,MAAME,MAAN,CAAaC,EAAvB,CAAP;AACD,GAVK;AAWN;AACAK,mBAAiB,CAACC,SAAD,EAAYC,SAAZ,KACfD,UAAUT,KAAV,CAAgBE,MAAhB,CAAuBC,EAAvB,KAA8BO,UAAUV,KAAV,CAAgBE,MAAhB,CAAuBC;AAbjD,CAAR,CAFa,EAiBbX,IAjBa,C;;;AAmBfA,KAAKmB,SAAL,GAAiB;AACfhB,QAAM,oBAAUiB,KAAV,CAAgB;AACpBhB,4BADoB;AAEpBC;AAFoB,GAAhB;AADS,CAAjB;;AAOAL,KAAKqB,YAAL,GAAoB;AAClBlB,QAAM;AADY,CAApB","file":"Post.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/risorso","sourcesContent":["import React from 'react';\nimport PropTypes, { string } from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { withJob } from 'react-jobs';\nimport Helmet from 'react-helmet';\nimport * as PostActions from '../../../../actions/posts';\nimport * as FromState from '../../../../reducers';\n\nexport function Post({ post }) {\n  if (!post) {\n    // Post hasn't been fetched yet. It would be better if we had a \"status\"\n    // reducer attached to our posts which gave us a bit more insight, such\n    // as whether the post is currently being fetched, or if the fetch failed.\n    return null;\n  }\n\n  const { title, body } = post;\n\n  return (\n    <div>\n      <Helmet title={`Posts - ${title}`} />\n\n      <h1>\n        {title}\n      </h1>\n      <div>\n        {body}\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state, { match }) {\n  return {\n    post: FromState.getPostById(state, match.params.id),\n  };\n}\n\nconst mapActionsToProps = {\n  fetchPost: PostActions.fetch,\n};\n\n// We use the \"compose\" function from redux (but the lodash/ramda/etc equivalent\n// would do the same), so that we can neatly attach multiple higher order\n// functions to our component.\n// They get attached to our component from a bottom up approach (i.e. the\n// arguments of compose from right to left).\n// Firstly the \"withJob\" is attached, indicating we want to do some async work.\n// Then the redux \"connect\" is attached.\n// This means the redux state and action will be passed through our \"withJob\".\n// The job is meant to fire the fetching of a post.  If no post exists within\n// the redux state it will fire the \"fetchPost\" redux-thunk action.  If you\n// look at that action you will see it returns a Promise. It is a requirement\n// to return a Promise when executing an asynchronous job so that the job\n// runner knows when the job is complete.  You will also see that we first\n// check to see if the post already exists within the state, if so we just\n// return it which would then result in a synchronous execution of our component.\nexport default compose(\n  connect(mapStateToProps, mapActionsToProps),\n  withJob({\n    work: ({ match, post, fetchPost }) => {\n      if (post) {\n        // We already have a post, just return true.\n        return true;\n      }\n\n      // Execute the redux-thunk powered action that returns a Promise and\n      // fetches the post.\n      return fetchPost(match.params.id);\n    },\n    // Any time the post id changes we need to trigger the work.\n    shouldWorkAgain: (prevProps, nextProps) =>\n      prevProps.match.params.id !== nextProps.match.params.id,\n  }),\n)(Post);\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    title: string,\n    body: string,\n  }),\n};\n\nPost.defaultProps = {\n  post: {},\n};\n"]}