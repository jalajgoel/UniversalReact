{"version":3,"sources":["client/index.js"],"names":["container","document","querySelector","supportsHistory","window","history","asyncComponentsRehydrateState","__ASYNC_COMPONENTS_REHYDRATE_STATE__","renderApp","TheApp","app","then","require","process","env","BUILD_FLAG_IS_DEV","module","hot","accept","default"],"mappings":";;2GAAA;;AAEA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AAEA;;AAEA;;;;AACA;;;;;;AAEA;AACA,IAAMA,YAAYC,SAASC,aAAT,CAAuB,MAAvB,CAAlB;;AAEA;AACA;AACA;AACA,IAAMC,kBAAkB,eAAeC,OAAOC,OAA9C;;AAEA;AACA;AACA,IAAMC,gCAAgCF,OAAOG,oCAA7C;;AAEA;;;AAGA,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;AACzB;AACA;AACA,MAAMC,MACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA,QAAwB,gBAAgBJ,6BAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA,UAAe,cAAc,CAACH,eAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,sCAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AADF;AADF,GADF;;AAUA;AACA;AACA;AACA,wCAAkBO,GAAlB,EAAuBC,IAAvB,CAA4B;AAAA,WAAM,sBAAOD,GAAP,EAAYV,SAAZ,CAAN;AAAA,GAA5B;AACD;;AAED;AACAQ;;AAEA;AACA;AACA;AACAI,QAAQ,yBAAR;;AAEA;AACA,IAAIC,QAAQC,GAAR,CAAYC,iBAAZ,KAAkC,MAAlC,IAA4CC,OAAOC,GAAvD,EAA4D;AAC1D;AACAD,SAAOC,GAAP,CAAWC,MAAX,CAAkB,YAAlB;AACA;AACAF,SAAOC,GAAP,CAAWC,MAAX,CAAkB,8BAAlB,EAAkD,YAAM;AACtDV,cAAUI,QAAQ,8BAAR,EAAwCO,OAAlD;AACD,GAFD;AAGD;;;;;;;;gCAjDKnB,S;;gCAKAG,e;;gCAIAG,6B;;gCAKGE,S","file":"index.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/react-universally","sourcesContent":["/* eslint-disable global-require */\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport BrowserRouter from 'react-router-dom/BrowserRouter';\nimport asyncBootstrapper from 'react-async-bootstrapper';\nimport { AsyncComponentProvider } from 'react-async-component';\n\nimport './polyfills';\n\nimport ReactHotLoader from './components/ReactHotLoader';\nimport DemoApp from '../shared/components/DemoApp';\n\n// Get the DOM Element that will host our React application.\nconst container = document.querySelector('#app');\n\n// Does the user's browser support the HTML5 history API?\n// If the user's browser doesn't support the HTML5 history API then we\n// will force full page refreshes on each page change.\nconst supportsHistory = 'pushState' in window.history;\n\n// Get any rehydrateState for the async components.\n// eslint-disable-next-line no-underscore-dangle\nconst asyncComponentsRehydrateState = window.__ASYNC_COMPONENTS_REHYDRATE_STATE__;\n\n/**\n * Renders the given React Application component.\n */\nfunction renderApp(TheApp) {\n  // Firstly, define our full application component, wrapping the given\n  // component app with a browser based version of react router.\n  const app = (\n    <ReactHotLoader>\n      <AsyncComponentProvider rehydrateState={asyncComponentsRehydrateState}>\n        <BrowserRouter forceRefresh={!supportsHistory}>\n          <TheApp />\n        </BrowserRouter>\n      </AsyncComponentProvider>\n    </ReactHotLoader>\n  );\n\n  // We use the react-async-component in order to support code splitting of\n  // our bundle output. It's important to use this helper.\n  // @see https://github.com/ctrlplusb/react-async-component\n  asyncBootstrapper(app).then(() => render(app, container));\n}\n\n// Execute the first render of our app.\nrenderApp(DemoApp);\n\n// This registers our service worker for asset caching and offline support.\n// Keep this as the last item, just in case the code execution failed (thanks\n// to react-boilerplate for that tip.)\nrequire('./registerServiceWorker');\n\n// The following is needed so that we can support hot reloading our application.\nif (process.env.BUILD_FLAG_IS_DEV === 'true' && module.hot) {\n  // Accept changes to this file for hot reloading.\n  module.hot.accept('./index.js');\n  // Any changes to our App will cause a hotload re-render.\n  module.hot.accept('../shared/components/DemoApp', () => {\n    renderApp(require('../shared/components/DemoApp').default);\n  });\n}\n"]}