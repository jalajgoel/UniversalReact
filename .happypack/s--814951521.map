{"version":3,"sources":["config/values.js"],"names":["EnvVars","values","clientConfigFilter","welcomeMessage","serviceWorker","enabled","polyfillIO","htmlPage","host","string","port","number","clientDevServerPort","disableSSR","browserCacheMaxAge","url","features","titleTemplate","defaultTitle","description","defaultCss","cspExtensions","childSrc","connectSrc","defaultSrc","fontSrc","imgSrc","mediaSrc","manifestSrc","objectSrc","scriptSrc","styleSrc","publicAssetsPath","buildOutputPath","includeSourceMapsForOptimisedClientBundle","bundleSrcTypes","bundleAssetsFileName","nodeExternalsFileTypeWhitelist","fileName","includePublicAssets","offlinePageFileName","bundles","client","srcEntryFile","srcPaths","outputPath","webPath","devVendorDLL","include","name","server","additionalNodeBundles","plugins","babelConfig","buildOptions","target","mode","webpackConfig","process","env","BUILD_FLAG_IS_CLIENT","Error"],"mappings":"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","file":"values.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/risorso","sourcesContent":["/**\n * Project Configuration.\n *\n * NOTE: All file/folder paths should be relative to the project root. The\n * absolute paths should be resolved during runtime by our build internal/server.\n */\n\nimport * as EnvVars from './utils/envVars';\n\nconst values = {\n  // The configuration values that should be exposed to our client bundle.\n  // This value gets passed through the /shared/utils/objects/filterWithRules\n  // util to create a filter object that can be serialised and included\n  // with our client bundle.\n  clientConfigFilter: {\n    // This is here as an example showing that you can expose variables\n    // that were potentially provivded by the environment\n    welcomeMessage: true,\n    // We only need to expose the enabled flag of the service worker.\n    serviceWorker: {\n      enabled: true,\n    },\n    // We need to expose all the polyfill.io settings.\n    polyfillIO: true,\n    // We need to expose all the htmlPage settings.\n    htmlPage: true,\n  },\n\n  // The host on which the server should run.\n  host: EnvVars.string('HOST', '0.0.0.0'),\n  // The port on which the server should run.\n  port: EnvVars.number('PORT', 1337),\n\n  // The port on which the client bundle development server should run.\n  clientDevServerPort: EnvVars.number('CLIENT_DEV_PORT', 7331),\n\n  // This is an example environment variable which is used within the react\n  // application to demonstrate the usage of environment variables across\n  // the client and server bundles.\n  welcomeMessage: EnvVars.string('WELCOME_MSG', 'Hello world!'),\n\n  // Disable server side rendering?\n  disableSSR: false,\n\n  // How long should we set the browser cache for the served assets?\n  // Don't worry, we add hashes to the files, so if they change the new files\n  // will be served to browsers.\n  // We are using the \"ms\" format to set the length.\n  // @see https://www.npmjs.com/package/ms\n  browserCacheMaxAge: '365d',\n\n  // We use the polyfill.io service which provides the polyfills that a\n  // client needs, which is far more optimal than the large output\n  // generated by babel-polyfill.\n  // Note: we have to keep this seperate from our \"htmlPage\" configuration\n  // as the polyfill needs to be loaded BEFORE any of our other javascript\n  // gets parsed.\n  polyfillIO: {\n    enabled: true,\n    url: '//cdn.polyfill.io/v2/polyfill.min.js',\n    // Reference https://qa.polyfill.io/v2/docs/features for a full list\n    // of features.\n    features: [\n      // The default list.\n      'default',\n      'es6',\n    ],\n  },\n\n  // Basic configuration for the HTML page that hosts our application.\n  // We make use of react-helmet to consume the values below.\n  // @see https://github.com/nfl/react-helmet\n  htmlPage: {\n    titleTemplate: 'RisorsoHomePage, %s',\n    defaultTitle: 'Risorso,',\n\n    description:\n      '',\n      defaultCss:\"index.css\"\n  },\n\n  // Content Security Policy (CSP)\n  // @see server/middleware/security for more info.\n  cspExtensions: {\n    childSrc: [],\n    connectSrc: [],\n    defaultSrc: [],\n    fontSrc: ['fonts.googleapis.com/css', 'fonts.gstatic.com'],\n    imgSrc: [],\n    mediaSrc: [],\n    manifestSrc: [],\n    objectSrc: [],\n    scriptSrc: [\n      // Allow scripts from cdn.polyfill.io so that we can import the\n      // polyfill.\n      'cdn.polyfill.io',\n    ],\n    styleSrc: [\n      'cdn.rawgit.com/milligram/milligram/master/dist/milligram.min.css',\n      'fonts.googleapis.com/css',\n    ],\n  },\n\n  // Path to the public assets that will be served off the root of the\n  // HTTP server.\n  publicAssetsPath: './public',\n\n  // Where does our build output live?\n  buildOutputPath: './build',\n\n  // Do you want to included source maps for optimised builds of the client\n  // bundle?\n  includeSourceMapsForOptimisedClientBundle: false,\n\n  // These extensions are tried when resolving src files for our bundles..\n  bundleSrcTypes: ['js', 'jsx', 'json'],\n\n  // What should we name the json output file that webpack generates\n  // containing details of all output files for a bundle?\n  bundleAssetsFileName: 'assets.json',\n\n  // node_modules are not included in any bundles that target \"node\" as a\n  // runtime (e.g.. the server bundle) as including them often breaks builds\n  // due to thinks like require statements containing expressions..\n  // However. some of the modules contain files need to be processed by\n  // one of our Webpack loaders (e.g. CSS). Add any file types to the list\n  // below to allow them to be processed by Webpack.\n  nodeExternalsFileTypeWhitelist: [\n    /\\.(eot|woff|woff2|ttf|otf)$/,\n    /\\.(svg|png|jpg|jpeg|gif|ico)$/,\n    /\\.(mp4|mp3|ogg|swf|webp)$/,\n    /\\.(css|scss|sass|sss|less)$/,\n  ],\n\n  // Note: you can only have a single service worker instance.  Our service\n  // worker implementation is bound to the \"client\" and \"server\" bundles.\n  // It includes the \"client\" bundle assets, as well as the public folder assets,\n  // and it is served by the \"server\" bundle.\n  serviceWorker: {\n    // Enabled?\n    enabled: true,\n    // Service worker name\n    fileName: 'sw.js',\n    // Paths to the public assets which should be included within our\n    // service worker. Relative to our public folder path, and accepts glob\n    // syntax.\n    includePublicAssets: [\n      // NOTE: This will include ALL of our public folder assets.  We do\n      // a glob pull of them and then map them to /foo paths as all the\n      // public folder assets get served off the root of our application.\n      // You may or may not want to be including these assets.  Feel free\n      // to remove this or instead include only a very specific set of\n      // assets.\n      './**/*',\n    ],\n    // Offline page file name.\n    offlinePageFileName: 'offline.html',\n  },\n\n  bundles: {\n    client: {\n      // Src entry file.\n      srcEntryFile: './client/index.js',\n\n      // Src paths.\n      srcPaths: [\n        './client',\n        './shared',\n        // The service worker offline page generation needs access to the\n        // config folder.  Don't worry we have guards within the config files\n        // to ensure they never get included in a client bundle.\n        './config',\n      ],\n\n      // Where does the client bundle output live?\n      outputPath: './build/client',\n\n      // What is the public http path at which we must serve the bundle from?\n      webPath: '/client/',\n\n      // Configuration settings for the development vendor DLL.  This will be created\n      // by our development server and provides an improved dev experience\n      // by decreasing the number of modules that webpack needs to process\n      // for every rebuild of our client bundle.  It by default uses the\n      // dependencies configured in package.json however you can customise\n      // which of these dependencies are excluded, whilst also being able to\n      // specify the inclusion of additional modules below.\n      devVendorDLL: {\n        // Enabled?\n        enabled: true,\n\n        // Specify any dependencies that you would like to include in the\n        // Vendor DLL.\n        //\n        // NOTE: It is also possible that some modules require specific\n        // webpack loaders in order to be processed (e.g. CSS/SASS etc).\n        // For these cases you don't want to include them in the Vendor DLL.\n        include: [\n          'react-async-component',\n          'react',\n          'react-dom',\n          'react-helmet',\n          'react-router-dom',\n          'redux',\n          'react-redux',\n          'redux-thunk',\n          'axios',\n        ],\n\n        // The name of the vendor DLL.\n        name: '__dev_vendor_dll__',\n      },\n    },\n\n    server: {\n      // Src entry file.\n      srcEntryFile: './server/index.js',\n\n      // Src paths.\n      srcPaths: ['./server', './shared', './config'],\n\n      // Where does the server bundle output live?\n      outputPath: './build/server',\n    },\n  },\n\n  additionalNodeBundles: {\n    // NOTE: The webpack configuration and build scripts have been built so\n    // that you can add arbitrary additional node bundle configurations here.\n    //\n    // A common requirement for larger projects is to add additional \"node\"\n    // target bundles (e.g an APi server endpoint). Therefore flexibility has been\n    // baked into our webpack config factory to allow for this.\n    //\n    // Simply define additional configurations similar to below.  The development\n    // server will manage starting them up for you.  The only requirement is that\n    // within the entry for each bundle you create and return the \"express\"\n    // listener.\n    /*\n    apiServer: {\n      srcEntryFile: './api/index.js',\n      srcPaths: [\n        './api',\n        './shared',\n        './config',\n      ],\n      outputPath: './build/api',\n    }\n    */\n  },\n\n  // These plugin definitions provide you with advanced hooks into customising\n  // the project without having to reach into the internals of the tools.\n  //\n  // We have decided to create this plugin approach so that you can come to\n  // a centralised configuration folder to do most of your application\n  // configuration adjustments.  Additionally it helps to make merging\n  // from the origin starter kit a bit easier.\n  plugins: {\n    // This plugin allows you to provide final adjustments your babel\n    // configurations for each bundle before they get processed.\n    //\n    // This function will be called once for each for your bundles.  It will be\n    // provided the current webpack config, as well as the buildOptions which\n    // detail which bundle and mode is being targetted for the current function run.\n    babelConfig: (babelConfig, buildOptions) => {\n      // eslint-disable-next-line no-unused-vars\n      const { target, mode } = buildOptions;\n\n      // Example\n      /*\n      if (target === 'server' && mode === 'development') {\n        babelConfig.presets.push('foo');\n      }\n     */\n\n      return babelConfig;\n    },\n\n    // This plugin allows you to provide final adjustments your webpack\n    // configurations for each bundle before they get processed.\n    //\n    // I would recommend looking at the \"webpack-merge\" module to help you with\n    // merging modifications to each config.\n    //\n    // This function will be called once for each for your bundles.  It will be\n    // provided the current webpack config, as well as the buildOptions which\n    // detail which bundle and mode is being targetted for the current function run.\n    webpackConfig: (webpackConfig, buildOptions) => {\n      // eslint-disable-next-line no-unused-vars\n      const { target, mode } = buildOptions;\n\n      // Example:\n      /*\n      if (target === 'server' && mode === 'development') {\n        webpackConfig.plugins.push(new MyCoolWebpackPlugin());\n      }\n      */\n\n      // Debugging/Logging Example:\n      /*\n      if (target === 'server') {\n        console.log(JSON.stringify(webpackConfig, null, 4));\n      }\n      */\n\n      return webpackConfig;\n    },\n  },\n};\n\n// This protects us from accidentally including this configuration in our\n// client bundle. That would be a big NO NO to do. :)\nif (process.env.BUILD_FLAG_IS_CLIENT === 'true') {\n  throw new Error(\n    \"You shouldn't be importing the `<projectroot>/config/values.js` directly into code that will be included in your 'client' bundle as the configuration object will be sent to user's browsers. This could be a security risk! Instead, use the `config` helper function located at `<projectroot>/config/index.js`.\",\n  );\n}\n\nexport default values;\n"]}