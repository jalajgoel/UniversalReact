{"version":3,"sources":["server/index.js"],"names":["app","disable","use","process","env","BUILD_FLAG_IS_DEV","get","static","listener","listen","console","log"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;AACA,MAAMA,MAAM,wBAAZ;;AAEA;AAjBA;;AAkBAA,IAAIC,OAAJ,CAAY,cAAZ;;AAEA;AACAD,IAAIE,GAAJ,CAAQ,qBAAR;;AAEA;AACAF,IAAIE,GAAJ,CAAQ,4BAAR;;AAEA;AACA;AACA;AACA,IAAIC,QAAQC,GAAR,CAAYC,iBAAZ,KAAkC,OAAlC,IAA6C,sBAAO,uBAAP,CAAjD,EAAkF;AAChFL,MAAIM,GAAJ,CAAS,IAAG,sBAAO,wBAAP,CAAiC,EAA7C;AACAN,MAAIM,GAAJ,CACG,GAAE,sBAAO,wBAAP,CAAiC,GAAE,sBAAO,mCAAP,CAA4C,EADpF;AAID;;AAED;AACAN,IAAIE,GAAJ,CAAQ,sBAAO,wBAAP,CAAR;;AAEA;AACA;AACAF,IAAIE,GAAJ,CAAQ,kBAAQK,MAAR,CAAe,mBAAY,qBAAWD,GAAX,EAAZ,EAA8B,sBAAO,kBAAP,CAA9B,CAAf,CAAR;;AAEA;AACAN,IAAIM,GAAJ,CAAQ,GAAR;;AAEA;AACAN,IAAIE,GAAJ,CAAQ,0BAAR;;AAEA;AACA,MAAMM,WAAWR,IAAIS,MAAJ,CAAW,sBAAO,MAAP,CAAX,EAA2B,MAC1CC,QAAQC,GAAR,CAAa,4BAA2B,sBAAO,MAAP,CAAe,EAAvD,CADe,CAAjB;;AAGA;AACA;kBACeH,Q","file":"index.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/risorso","sourcesContent":["/* eslint-disable no-console */\n\nimport express from 'express';\nimport compression from 'compression';\nimport { resolve as pathResolve } from 'path';\nimport appRootDir from 'app-root-dir';\nimport reactApplication from './middleware/reactApplication';\nimport security from './middleware/security';\nimport clientBundle from './middleware/clientBundle';\nimport serviceWorker from './middleware/serviceWorker';\nimport offlinePage from './middleware/offlinePage';\nimport errorHandlers from './middleware/errorHandlers';\nimport config from '../config';\n\n// Create our express based server.\nconst app = express();\n\n// Don't expose any software information to potential hackers.\napp.disable('x-powered-by');\n\n// Security middlewares.\napp.use(...security);\n\n// Gzip compress the responses.\napp.use(compression());\n\n// Register our service worker generated by our webpack config.\n// We do not want the service worker registered for development builds, and\n// additionally only want it registered if the config allows.\nif (process.env.BUILD_FLAG_IS_DEV === 'false' && config('serviceWorker.enabled')) {\n  app.get(`/${config('serviceWorker.fileName')}`, serviceWorker);\n  app.get(\n    `${config('bundles.client.webPath')}${config('serviceWorker.offlinePageFileName')}`,\n    offlinePage,\n  );\n}\n\n// Configure serving of our client bundle.\napp.use(config('bundles.client.webPath'), clientBundle);\n\n// Configure static serving of our \"public\" root http path static files.\n// Note: these will be served off the root (i.e. '/') of our application.\napp.use(express.static(pathResolve(appRootDir.get(), config('publicAssetsPath'))));\n\n// The React application middleware.\napp.get('*', reactApplication);\n\n// Error Handler middlewares.\napp.use(...errorHandlers);\n\n// Create an http listener for our express app.\nconst listener = app.listen(config('port'), () =>\n  console.log(`Server listening on port ${config('port')}`));\n\n// We export the listener as it will be handy for our development hot reloader,\n// or for exposing a general extension layer for application customisations.\nexport default listener;\n"]}