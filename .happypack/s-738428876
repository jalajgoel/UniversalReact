'use strict';

var _jsx = function () { var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 0xeac7; return function createRawReactElement(type, props, key, children) { var defaultProps = type && type.defaultProps; var childrenLength = arguments.length - 3; if (!props && childrenLength !== 0) { props = {}; } if (props && defaultProps) { for (var propName in defaultProps) { if (props[propName] === void 0) { props[propName] = defaultProps[propName]; } } } else if (!props) { props = defaultProps || {}; } if (childrenLength === 1) { props.children = children; } else if (childrenLength > 1) { var childArray = Array(childrenLength); for (var i = 0; i < childrenLength; i++) { childArray[i] = arguments[i + 3]; } props.children = childArray; } return { $$typeof: REACT_ELEMENT_TYPE, type: type, key: key === undefined ? null : '' + key, ref: null, props: props, _owner: null }; }; }(); /* eslint-disable global-require */

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _BrowserRouter = require('react-router-dom/BrowserRouter');

var _BrowserRouter2 = _interopRequireDefault(_BrowserRouter);

var _reactAsyncBootstrapper = require('react-async-bootstrapper');

var _reactAsyncBootstrapper2 = _interopRequireDefault(_reactAsyncBootstrapper);

var _reactAsyncComponent = require('react-async-component');

var _reactJobs = require('react-jobs');

var _reactRedux = require('react-redux');

var _configureStore = require('../shared/redux/configureStore');

var _configureStore2 = _interopRequireDefault(_configureStore);

require('./polyfills');

var _ReactHotLoader = require('./components/ReactHotLoader');

var _ReactHotLoader2 = _interopRequireDefault(_ReactHotLoader);

var _App = require('../shared/components/App');

var _App2 = _interopRequireDefault(_App);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Get the DOM Element that will host our React application.
var container = document.querySelector('#app');

// Create our Redux store.
var store = (0, _configureStore2.default)(
// Server side rendering would have mounted our state on this global.
window.__APP_STATE__ // eslint-disable-line no-underscore-dangle
);

// Does the user's browser support the HTML5 history API?
// If the user's browser doesn't support the HTML5 history API then we
// will force full page refreshes on each page change.
var supportsHistory = 'pushState' in window.history;

// Get any rehydrateState for the async components.
// eslint-disable-next-line no-underscore-dangle
var asyncComponentsRehydrateState = window.__ASYNC_COMPONENTS_REHYDRATE_STATE__;

// Get any "rehydrate" state sent back by the server
// eslint-disable-next-line no-underscore-dangle
var rehydrateState = window.__JOBS_STATE__;

/**
 * Renders the given React Application component.
 */
function renderApp(TheApp) {
  // Firstly, define our full application component, wrapping the given
  // component app with a browser based version of react router.
  var app = _jsx(_ReactHotLoader2.default, {}, void 0, _jsx(_reactAsyncComponent.AsyncComponentProvider, {
    rehydrateState: asyncComponentsRehydrateState
  }, void 0, _jsx(_reactJobs.JobProvider, {
    rehydrateState: rehydrateState
  }, void 0, _jsx(_reactRedux.Provider, {
    store: store
  }, void 0, _jsx(_BrowserRouter2.default, {
    forceRefresh: !supportsHistory
  }, void 0, _jsx(TheApp, {}))))));

  // We use the react-async-component in order to support code splitting of
  // our bundle output. It's important to use this helper.
  // @see https://github.com/ctrlplusb/react-async-component
  (0, _reactAsyncBootstrapper2.default)(app).then(function () {
    return (0, _reactDom.render)(app, container);
  });
}

// Execute the first render of our app.
renderApp(_App2.default);

// This registers our service worker for asset caching and offline support.
// Keep this as the last item, just in case the code execution failed (thanks
// to react-boilerplate for that tip.)
require('./registerServiceWorker');

// The following is needed so that we can support hot reloading our application.
if (process.env.BUILD_FLAG_IS_DEV === 'true' && module.hot) {
  module.hot.dispose(function (data) {
    // Deserialize store and keep in hot module data for next replacement
    data.store = stringify(toJS(store)); // eslint-disable-line
  });

  // Accept changes to this file for hot reloading.
  module.hot.accept('./index.js');
  // Any changes to our App will cause a hotload re-render.
  module.hot.accept('../shared/components/App', function () {
    renderApp(require('../shared/components/App').default);
  });
}