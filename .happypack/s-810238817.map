{"version":3,"sources":["server/middleware/reactApplication/index.js"],"names":["reactApplicationMiddleware","request","response","locals","nonce","Error","process","env","BUILD_FLAG_IS_DEV","title","level","message","url","html","status","send","asyncComponentsContext","reactRouterContext","app","then","appString","rewind","getState","setHeader","end","missed"],"mappings":";;;;;;kBAgBwBA,0B;;AAhBxB;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;AACA;;;;AAEA;;;AAGe,SAASA,0BAAT,CAAoCC,OAApC,EAA6CC,QAA7C,EAAuD;AACpE;AACA;AACA,MAAI,OAAOA,SAASC,MAAT,CAAgBC,KAAvB,KAAiC,QAArC,EAA+C;AAC7C,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;AACD,QAAMD,QAAQF,SAASC,MAAT,CAAgBC,KAA9B;;AAEA;AACA;AACA,MAAI,sBAAO,YAAP,CAAJ,EAA0B;AACxB,QAAIE,QAAQC,GAAR,CAAYC,iBAAZ,KAAkC,MAAtC,EAA8C;AAC5C;AACA,sBAAI;AACFC,eAAO,QADL;AAEFC,eAAO,MAFL;AAGFC,iBAAU,qCAAoCV,QAAQW,GAAI;AAHxD,OAAJ;AAKD;AACD;AACA;AACA,UAAMC,OAAO,kCAAqB,sDAAY,OAAOT,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,MAArB,CAAb;AACAF,aAASY,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA2B,kBAAiBF,IAAK,EAAjD;AACA;AACD;;AAED;AACA,QAAMG,yBAAyB,8CAA/B;;AAEA;AACA;AACA,QAAMC,qBAAqB,EAA3B;;AAEA;AACA,QAAMC,MACJ;AAAA;AAAA,MAAwB,cAAcF,sBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA,QAAc,UAAUf,QAAQW,GAAhC,EAAqC,SAASK,kBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AADF,GADF;;AAQA;AACA;AACA,wCAAkBC,GAAlB,EAAuBC,IAAvB,CAA4B,MAAM;AAChC,UAAMC,YAAY,4BAAeF,GAAf,CAAlB;;AAEA;AACA,UAAML,OAAO,kCACX;AACE,sBAAgBO,SADlB;AAEE,aAAOhB,KAFT;AAGE,cAAQ,sBAAOiB,MAAP,EAHV;AAIE,4BAAsBL,uBAAuBM,QAAvB,EAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAb;;AASA;AACA;AACA,QAAIL,mBAAmBL,GAAvB,EAA4B;AAC1BV,eAASY,MAAT,CAAgB,GAAhB,EAAqBS,SAArB,CAA+B,UAA/B,EAA2CN,mBAAmBL,GAA9D;AACAV,eAASsB,GAAT;AACA;AACD;;AAEDtB,aACGY,MADH,CAEIG,mBAAmBQ,MAAnB,GACI;AACF;AACA,OAHF,GAII;AACF,OAPN,EASGV,IATH,CASS,kBAAiBF,IAAK,EAT/B;AAUD,GA/BD;AAgCD","file":"index.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/react-universally","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { renderToString, renderToStaticMarkup } from 'react-dom/server';\nimport { StaticRouter } from 'react-router-dom';\nimport { AsyncComponentProvider, createAsyncContext } from 'react-async-component';\nimport asyncBootstrapper from 'react-async-bootstrapper';\n\nimport config from '../../../config';\n\nimport ServerHTML from './ServerHTML';\nimport DemoApp from '../../../shared/components/DemoApp';\nimport { log } from '../../../internal/utils';\n\n/**\n * React application middleware, supports server side rendering.\n */\nexport default function reactApplicationMiddleware(request, response) {\n  // Ensure a nonce has been provided to us.\n  // See the server/middleware/security.js for more info.\n  if (typeof response.locals.nonce !== 'string') {\n    throw new Error('A \"nonce\" value has not been attached to the response');\n  }\n  const nonce = response.locals.nonce;\n\n  // It's possible to disable SSR, which can be useful in development mode.\n  // In this case traditional client side only rendering will occur.\n  if (config('disableSSR')) {\n    if (process.env.BUILD_FLAG_IS_DEV === 'true') {\n      // eslint-disable-next-line no-console\n      log({\n        title: 'Server',\n        level: 'info',\n        message: `Handling react route without SSR: ${request.url}`,\n      });\n    }\n    // SSR is disabled so we will return an \"empty\" html page and\n    // rely on the client to initialize and render the react application.\n    const html = renderToStaticMarkup(<ServerHTML nonce={nonce} />);\n    response.status(200).send(`<!DOCTYPE html>${html}`);\n    return;\n  }\n\n  // Create a context for our AsyncComponentProvider.\n  const asyncComponentsContext = createAsyncContext();\n\n  // Create a context for <StaticRouter>, which will allow us to\n  // query for the results of the render.\n  const reactRouterContext = {};\n\n  // Declare our React application.\n  const app = (\n    <AsyncComponentProvider asyncContext={asyncComponentsContext}>\n      <StaticRouter location={request.url} context={reactRouterContext}>\n        <DemoApp />\n      </StaticRouter>\n    </AsyncComponentProvider>\n  );\n\n  // Pass our app into the react-async-component helper so that any async\n  // components are resolved for the render.\n  asyncBootstrapper(app).then(() => {\n    const appString = renderToString(app);\n\n    // Generate the html response.\n    const html = renderToStaticMarkup(\n      <ServerHTML\n        reactAppString={appString}\n        nonce={nonce}\n        helmet={Helmet.rewind()}\n        asyncComponentsState={asyncComponentsContext.getState()}\n      />,\n    );\n\n    // Check if the router context contains a redirect, if so we need to set\n    // the specific status and redirect header and end the response.\n    if (reactRouterContext.url) {\n      response.status(302).setHeader('Location', reactRouterContext.url);\n      response.end();\n      return;\n    }\n\n    response\n      .status(\n        reactRouterContext.missed\n          ? // If the renderResult contains a \"missed\" match then we set a 404 code.\n          // Our App component will handle the rendering of an Error404 view.\n          404\n          : // Otherwise everything is all good and we send a 200 OK status.\n          200,\n      )\n      .send(`<!DOCTYPE html>${html}`);\n  });\n}\n"]}