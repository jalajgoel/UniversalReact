{"version":3,"sources":["shared/redux/configureStore.js"],"names":["configureStore","initialState","enhancers","withExtraArgument","axios","process","env","NODE_ENV","window","devToolsExtension","f","store","module","hot","accept","nextRootReducer","require","default","replaceReducer"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,cAAT,CAAwBC,YAAxB,EAAsC;AACpC,QAAMC,YAAY;AAChB;AACA;AACE;AACA;AACA;AACA;AACA,uBAAMC,iBAAN,CAAwB,EAAEC,sBAAF,EAAxB,CALF,CAFgB;AAShB;AACA;AACA;AACA;AACAC,UAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IACA,OAAOC,MAAP,KAAkB,WADlB,IAEA,OAAOA,OAAOC,iBAAd,KAAoC,WAFpC,GAGI;AACAD,SAAOC,iBAAP,EAJJ,GAKI;AACAC,OAAKA,CAnBO,CAAlB;;AAsBA,QAAMC,QAAQV,eACV,4CAAqBA,YAArB,EAAmCC,SAAnC,CADU,GAEV,4CAAqBA,SAArB,CAFJ;;AAIA,MAAIG,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,aAAzB,IAA0CK,OAAOC,GAArD,EAA0D;AACxD;AACA;AACAD,WAAOC,GAAP,CAAWC,MAAX,CAAkB,aAAlB,EAAiC,MAAM;AACrC,YAAMC,kBAAkBC,QAAQ,aAAR,EAAuBC,OAA/C,CADqC,CACmB;;AAExDN,YAAMO,cAAN,CAAqBH,eAArB;AACD,KAJD;AAKD;;AAED,SAAOJ,KAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;kBAEeX,c","file":"configureStore.js","sourceRoot":"/home/b-rave/Documents/jalaj/Frontend-Development","sourcesContent":["import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport axios from 'axios';\nimport reducer from '../reducers';\n\nfunction configureStore(initialState) {\n  const enhancers = compose(\n    // Middleware store enhancer.\n    applyMiddleware(\n      // Initialising redux-thunk with extra arguments will pass the below\n      // arguments to all the redux-thunk actions. Below we are passing a\n      // preconfigured axios instance which can be used to fetch data with.\n      // @see https://github.com/gaearon/redux-thunk\n      thunk.withExtraArgument({ axios }),\n    ),\n    // Redux Dev Tools store enhancer.\n    // @see https://github.com/zalmoxisus/redux-devtools-extension\n    // We only want this enhancer enabled for development and when in a browser\n    // with the extension installed.\n    process.env.NODE_ENV === 'development' &&\n    typeof window !== 'undefined' &&\n    typeof window.devToolsExtension !== 'undefined'\n      ? // Call the brower extension function to create the enhancer.\n        window.devToolsExtension()\n      : // Else we return a no-op function.\n        f => f,\n  );\n\n  const store = initialState\n    ? createStore(reducer, initialState, enhancers)\n    : createStore(reducer, enhancers);\n\n  if (process.env.NODE_ENV === 'development' && module.hot) {\n    // Enable Webpack hot module replacement for reducers. This is so that we\n    // don't lose all of our current application state during hot reloading.\n    module.hot.accept('../reducers', () => {\n      const nextRootReducer = require('../reducers').default; // eslint-disable-line global-require\n\n      store.replaceReducer(nextRootReducer);\n    });\n  }\n\n  return store;\n}\n\n// NOTE: If we create an '/api' endpoint in our application then we will neeed to\n// configure the axios instances so that they will resolve to the proper URL\n// endpoints on the server. We have to provide absolute URLs for any of our\n// server bundles. To do so we can set the default 'baseURL' for axios. Any\n// relative path requests will then be appended to the 'baseURL' in order to\n// form an absolute URL.\n// We don't need to worry about this for client side executions, relative paths\n// will work fine there.\n// Example:\n//\n// const axiosConfig = process.env.IS_NODE === true\n//   ? { baseURL: process.env.NOW_URL || notEmpty(process.env.SERVER_URL) }\n//   : {};\n//\n// Then we will then have to initialise our redux-thunk middlware like so:\n//\n// thunk.withExtraArgument({\n//   axios: axios.create(axiosConfig),\n// })\n\nexport default configureStore;\n"]}