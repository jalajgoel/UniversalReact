{"version":3,"sources":["server/middleware/reactApplication/getClientBundleEntryAssets.js"],"names":["getClientBundleEntryAssets","resultCache","process","env","BUILD_FLAG_IS_DEV","assetsFilePath","get","existsSync","Error","readAssetsJSONFile","JSON","parse","readFileSync","assetsJSONCache","index"],"mappings":";;;;;kBAwBwBA,0B;;AApBxB;;;;AACA;;AACA;;;;AACA;;;;;;AAPA;;;;AASA,IAAIC,WAAJ;;AAEA;;;;;;;;;;;;;AAae,SAASD,0BAAT,GAAsC;AACnD;AACA;AACA;AACA,MAAIE,QAAQC,GAAR,CAAYC,iBAAZ,KAAkC,OAAlC,IAA6CH,WAAjD,EAA8D;AAC5D,WAAOA,WAAP;AACD;;AAED,QAAMI,iBAAiB,mBACrB,qBAAWC,GAAX,EADqB,EAErB,sBAAO,2BAAP,CAFqB,EAGpB,KAAI,sBAAO,sBAAP,CAA+B,EAHf,CAAvB;;AAMA,MAAI,CAAC,aAAGC,UAAH,CAAcF,cAAd,CAAL,EAAoC;AAClC,UAAM,IAAIG,KAAJ,CACH,0BAAyBH,cAAe,yHADrC,CAAN;AAGD;;AAED,QAAMI,qBAAqB,MAAMC,KAAKC,KAAL,CAAW,aAAGC,YAAH,CAAgBP,cAAhB,EAAgC,MAAhC,CAAX,CAAjC;AACA,QAAMQ,kBAAkBJ,oBAAxB;AACA,MAAI,OAAOI,gBAAgBC,KAAvB,KAAiC,WAArC,EAAkD;AAChD,UAAM,IAAIN,KAAJ,CAAU,wEAAV,CAAN;AACD;AACDP,gBAAcY,gBAAgBC,KAA9B;AACA,SAAOb,WAAP;AACD","file":"getClientBundleEntryAssets.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/risorso","sourcesContent":["/**\n * This file resolves the entry assets available from our client bundle.\n */\n\nimport fs from 'fs';\nimport { resolve as pathResolve } from 'path';\nimport appRootDir from 'app-root-dir';\nimport config from '../../../config';\n\nlet resultCache;\n\n/**\n * Retrieves the js/css for the named chunks that belong to our client bundle.\n *\n * Note: the order of the chunk names is important. The same ordering will be\n * used when rendering the scripts.\n *\n * This is useful to us for a couple of reasons:\n *   - It allows us to target the assets for a specific chunk, thereby only\n *     loading the assets we know we will need for a specific request.\n *   - The assets are hashed, and therefore they can't be \"manually\" added\n *     to the render logic.  Having this method allows us to easily fetch\n *     the respective assets simply by using a chunk name. :)\n */\nexport default function getClientBundleEntryAssets() {\n  // Return the assets json cache if it exists.\n  // In development mode we always read the assets json file from disk to avoid\n  // any cases where an older version gets cached.\n  if (process.env.BUILD_FLAG_IS_DEV === 'false' && resultCache) {\n    return resultCache;\n  }\n\n  const assetsFilePath = pathResolve(\n    appRootDir.get(),\n    config('bundles.client.outputPath'),\n    `./${config('bundleAssetsFileName')}`,\n  );\n\n  if (!fs.existsSync(assetsFilePath)) {\n    throw new Error(\n      `We could not find the \"${assetsFilePath}\" file, which contains a list of the assets of the client bundle.  Please ensure that the client bundle has been built.`,\n    );\n  }\n\n  const readAssetsJSONFile = () => JSON.parse(fs.readFileSync(assetsFilePath, 'utf8'));\n  const assetsJSONCache = readAssetsJSONFile();\n  if (typeof assetsJSONCache.index === 'undefined') {\n    throw new Error('No asset data found for expected \"index\" entry chunk of client bundle.');\n  }\n  resultCache = assetsJSONCache.index;\n  return resultCache;\n}\n"]}