{"version":3,"sources":["server/middleware/reactApplication/index.js"],"names":["reactApplicationMiddleware","request","response","locals","nonce","Error","process","env","BUILD_FLAG_IS_DEV","console","log","html","status","send","asyncComponentsContext","reactRouterContext","jobContext","store","app","url","then","appString","rewind","getState","setHeader","end","missed"],"mappings":";;;;;;kBAiBwBA,0B;;AAjBxB;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA;;;AAGe,SAASA,0BAAT,CAAoCC,OAApC,EAA6CC,QAA7C,EAAuD;AACpE;AACA;AACA,MAAI,OAAOA,SAASC,MAAT,CAAgBC,KAAvB,KAAiC,QAArC,EAA+C;AAC7C,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;AACD,QAAMD,QAAQF,SAASC,MAAT,CAAgBC,KAA9B;;AAEA;AACA;AACA,MAAI,sBAAO,YAAP,CAAJ,EAA0B;AACxB,QAAIE,QAAQC,GAAR,CAAYC,iBAAZ,KAAkC,MAAtC,EAA8C;AAC5C;AACAC,cAAQC,GAAR,CAAY,sCAAZ;AACD;AACD;AACA;AACA,UAAMC,OAAO,kCAAqB,sDAAY,OAAOP,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,MAArB,CAAb;AACAF,aAASU,MAAT,CAAgB,GAAhB,EAAqBC,IAArB,CAA2B,kBAAiBF,IAAK,EAAjD;AACA;AACD;;AAED;AACA,QAAMG,yBAAyB,8CAA/B;;AAEA;AACA;AACA,QAAMC,qBAAqB,EAA3B;;AAEA;AACA;AACA,QAAMC,aAAa,kCAAnB;;AAEA;AACA,QAAMC,QAAQ,+BAAd;;AAEA;AACA,QAAMC,MACJ;AAAA;AAAA,MAAwB,cAAcJ,sBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA,QAAa,YAAYE,UAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA,UAAc,UAAUf,QAAQkB,GAAhC,EAAqC,SAASJ,kBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA,YAAU,OAAOE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AADF;AADF;AADF,GADF;;AAYA;AACA;AACA,wCAAkBC,GAAlB,EAAuBE,IAAvB,CAA4B,MAAM;AAChC,UAAMC,YAAY,4BAAeH,GAAf,CAAlB;;AAEA;AACA,UAAMP,OAAO,kCACX;AACE,sBAAgBU,SADlB;AAEE,aAAOjB,KAFT;AAGE,cAAQ,sBAAOkB,MAAP,EAHV;AAIE,kBAAYL,MAAMM,QAAN,EAJd;AAKE,mBAAaR,kBALf;AAME,iBAAWC,WAAWO,QAAX,EANb;AAOE,4BAAsBT,uBAAuBS,QAAvB,EAPxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADW,CAAb;;AAYA;AACA;AACA,QAAIR,mBAAmBI,GAAvB,EAA4B;AAC1BjB,eAASU,MAAT,CAAgB,GAAhB,EAAqBY,SAArB,CAA+B,UAA/B,EAA2CT,mBAAmBI,GAA9D;AACAjB,eAASuB,GAAT;AACA;AACD;;AAEDvB,aACGU,MADH,CAEIG,mBAAmBW,MAAnB,GACI;AACA;AACA,OAHJ,GAII;AACA,OAPR,EASGb,IATH,CASS,kBAAiBF,IAAK,EAT/B;AAUD,GAlCD;AAmCD","file":"index.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/risorso","sourcesContent":["import React from 'react';\nimport { renderToString, renderToStaticMarkup } from 'react-dom/server';\nimport { StaticRouter } from 'react-router-dom';\nimport { AsyncComponentProvider, createAsyncContext } from 'react-async-component';\nimport { JobProvider, createJobContext } from 'react-jobs';\nimport asyncBootstrapper from 'react-async-bootstrapper';\nimport { Provider } from 'react-redux';\nimport Helmet from 'react-helmet';\nimport configureStore from '../../../shared/redux/configureStore';\n\nimport config from '../../../config';\nimport App from '../../../shared/components/App';\nimport ServerHTML from './ServerHTML';\n\n/**\n * React application middleware, supports server side rendering.\n */\nexport default function reactApplicationMiddleware(request, response) {\n  // Ensure a nonce has been provided to us.\n  // See the server/middleware/security.js for more info.\n  if (typeof response.locals.nonce !== 'string') {\n    throw new Error('A \"nonce\" value has not been attached to the response');\n  }\n  const nonce = response.locals.nonce;\n\n  // It's possible to disable SSR, which can be useful in development mode.\n  // In this case traditional client side only rendering will occur.\n  if (config('disableSSR')) {\n    if (process.env.BUILD_FLAG_IS_DEV === 'true') {\n      // eslint-disable-next-line no-console\n      console.log('==> Handling react route without SSR');\n    }\n    // SSR is disabled so we will return an \"empty\" html page and\n    // rely on the client to initialize and render the react application.\n    const html = renderToStaticMarkup(<ServerHTML nonce={nonce} />);\n    response.status(200).send(`<!DOCTYPE html>${html}`);\n    return;\n  }\n\n  // Create a context for our AsyncComponentProvider.\n  const asyncComponentsContext = createAsyncContext();\n\n  // Create a context for <StaticRouter>, which will allow us to\n  // query for the results of the render.\n  const reactRouterContext = {};\n\n  // Create the job context for our provider, this grants\n  // us the ability to track the resolved jobs to send back to the client.\n  const jobContext = createJobContext();\n\n  // Create the redux store.\n  const store = configureStore();\n\n  // Declare our React application.\n  const app = (\n    <AsyncComponentProvider asyncContext={asyncComponentsContext}>\n      <JobProvider jobContext={jobContext}>\n        <StaticRouter location={request.url} context={reactRouterContext}>\n          <Provider store={store}>\n            <App />\n          </Provider>\n        </StaticRouter>\n      </JobProvider>\n    </AsyncComponentProvider>\n  );\n\n  // Pass our app into the react-async-component helper so that any async\n  // components are resolved for the render.\n  asyncBootstrapper(app).then(() => {\n    const appString = renderToString(app);\n\n    // Generate the html response.\n    const html = renderToStaticMarkup(\n      <ServerHTML\n        reactAppString={appString}\n        nonce={nonce}\n        helmet={Helmet.rewind()}\n        storeState={store.getState()}\n        routerState={reactRouterContext}\n        jobsState={jobContext.getState()}\n        asyncComponentsState={asyncComponentsContext.getState()}\n      />,\n    );\n\n    // Check if the router context contains a redirect, if so we need to set\n    // the specific status and redirect header and end the response.\n    if (reactRouterContext.url) {\n      response.status(302).setHeader('Location', reactRouterContext.url);\n      response.end();\n      return;\n    }\n\n    response\n      .status(\n        reactRouterContext.missed\n          ? // If the renderResult contains a \"missed\" match then we set a 404 code.\n            // Our App component will handle the rendering of an Error404 view.\n            404\n          : // Otherwise everything is all good and we send a 200 OK status.\n            200,\n      )\n      .send(`<!DOCTYPE html>${html}`);\n  });\n}\n"]}