{"version":3,"sources":["server/index.js"],"names":["app","disable","use","process","env","BUILD_FLAG_IS_DEV","get","static","request","response","title","level","message","url","listener","listen","join"],"mappings":";;;;;;AAEA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;AAfA;;AAgBA,MAAMA,MAAM,wBAAZ;;AAEA;AACAA,IAAIC,OAAJ,CAAY,cAAZ;;AAEA;AACAD,IAAIE,GAAJ,CAAQ,qBAAR;;AAEA;AACAF,IAAIE,GAAJ,CAAQ,4BAAR;;AAEA;AACA;AACA;AACA,IAAIC,QAAQC,GAAR,CAAYC,iBAAZ,KAAkC,OAAlC,IAA6C,sBAAO,uBAAP,CAAjD,EAAkF;AAChFL,MAAIM,GAAJ,CAAS,IAAG,sBAAO,wBAAP,CAAiC,EAA7C;AACAN,MAAIM,GAAJ,CACG,GAAE,sBAAO,wBAAP,CAAiC,GAAE,sBAAO,mCAAP,CAA4C,EADpF;AAID;;AAED;AACAN,IAAIE,GAAJ,CAAQ,sBAAO,wBAAP,CAAR;;AAEA;AACA;AACAF,IAAIE,GAAJ,CAAQ,kBAAQK,MAAR,CAAe,mBAAY,qBAAWD,GAAX,EAAZ,EAA8B,sBAAO,kBAAP,CAA9B,CAAf,CAAR;;AAEA;AACAN,IAAIM,GAAJ,CAAQ,GAAR,EAAa,CAACE,OAAD,EAAUC,QAAV,KAAuB;AAClC,kBAAI;AACFC,WAAO,SADL;AAEFC,WAAO,SAFL;AAGFC,aAAU,iBAAgBJ,QAAQK,GAAI;AAHpC,GAAJ;;AAMA,SAAO,gCAAiBL,OAAjB,EAA0BC,QAA1B,CAAP;AACD,CARD;;AAUA;AACAT,IAAIE,GAAJ,CAAQ,0BAAR;;AAEA;AACA,MAAMY,WAAWd,IAAIe,MAAJ,CAAW,sBAAO,MAAP,CAAX,EAA2B,MAC1C,gBAAI;AACFL,SAAO,QADL;AAEFC,SAAO,SAFL;AAGFC,WAAU;;QAEN,sBAAO,gBAAP,CAAyB;;QAEzB,sBAAO,uBAAP,CAAgC;;;;yBAIf,sBAAO,uBAAP,CAAgC;mBACtC,sBAAO,oBAAP,CAA6B,KAAI,sBAAO,qBAAP,EAA8BI,IAA9B,CAAmC,IAAnC,CAAyC;;wCAErD,sBAAO,MAAP,CAAe;mDACJ,sBAAO,MAAP,CAAe,IAAG,sBAAO,MAAP,CAAe;;;;;;AAf9E,CAAJ,CADe,CAAjB;;AAyBA;AACA;kBACeF,Q","file":"index.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/react-universally","sourcesContent":["/* eslint-disable no-console */\n\nimport express from 'express';\nimport compression from 'compression';\nimport { resolve as pathResolve } from 'path';\nimport appRootDir from 'app-root-dir';\nimport reactApplication from './middleware/reactApplication';\nimport security from './middleware/security';\nimport clientBundle from './middleware/clientBundle';\nimport serviceWorker from './middleware/serviceWorker';\nimport offlinePage from './middleware/offlinePage';\nimport errorHandlers from './middleware/errorHandlers';\nimport config from '../config';\nimport { log } from '../internal/utils';\n\n// Create our express based server.\nconst app = express();\n\n// Don't expose any software information to potential hackers.\napp.disable('x-powered-by');\n\n// Security middlewares.\napp.use(...security);\n\n// Gzip compress the responses.\napp.use(compression());\n\n// Register our service worker generated by our webpack config.\n// We do not want the service worker registered for development builds, and\n// additionally only want it registered if the config allows.\nif (process.env.BUILD_FLAG_IS_DEV === 'false' && config('serviceWorker.enabled')) {\n  app.get(`/${config('serviceWorker.fileName')}`, serviceWorker);\n  app.get(\n    `${config('bundles.client.webPath')}${config('serviceWorker.offlinePageFileName')}`,\n    offlinePage,\n  );\n}\n\n// Configure serving of our client bundle.\napp.use(config('bundles.client.webPath'), clientBundle);\n\n// Configure static serving of our \"public\" root http path static files.\n// Note: these will be served off the root (i.e. '/') of our application.\napp.use(express.static(pathResolve(appRootDir.get(), config('publicAssetsPath'))));\n\n// The React application middleware.\napp.get('*', (request, response) => {\n  log({\n    title: 'Request',\n    level: 'special',\n    message: `Received for \"${request.url}\"`,\n  });\n\n  return reactApplication(request, response);\n});\n\n// Error Handler middlewares.\napp.use(...errorHandlers);\n\n// Create an http listener for our express app.\nconst listener = app.listen(config('port'), () =>\n  log({\n    title: 'server',\n    level: 'special',\n    message: `âœ“\n\n      ${config('welcomeMessage')}\n\n      ${config('htmlPage.defaultTitle')} is ready!\n\n      with\n\n      Service Workers: ${config('serviceWorker.enabled')}\n      Polyfills: ${config('polyfillIO.enabled')} (${config('polyfillIO.features').join(', ')})\n\n      Server is now listening on Port ${config('port')}\n      You can access it in the browser at http://${config('host')}:${config('port')}\n      Press Ctrl-C to stop.\n\n\n\n    `,\n  }),\n);\n\n// We export the listener as it will be handy for our development hot reloader,\n// or for exposing a general extension layer for application customisations.\nexport default listener;\n"]}