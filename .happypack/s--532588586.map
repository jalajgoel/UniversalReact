{"version":3,"sources":["config/index.js"],"names":["configGet","configCache","resolveConfigForBrowserOrServer","process","env","BUILD_FLAG_IS_NODE","require","default","window","__CLIENT_CONFIG__","console","warn","path","parts","split","length","Error","result","i","undefined","errorMessage","join","BUILD_FLAG_IS_DEV","BUILD_FLAG_IS_CLIENT"],"mappings":";;;;;kBA2FwBA,S;AA3FxB;;;;;;;;;;;AAWA;AACA;AACA;;AAEA;;AAEA,IAAIC,WAAJ;;AAEA;;;;;;;;AAQA,SAASC,+BAAT,GAA2C;AACzC,MAAID,WAAJ,EAAiB;AACf,WAAOA,WAAP;AACD;;AAED;AACA;AACA;AACA;AACA,MACE,OAAOE,QAAQC,GAAR,CAAYC,kBAAnB,KAA0C,WAA1C,IACAF,QAAQC,GAAR,CAAYC,kBAAZ,KAAmC,MAFrC,EAGE;AACA;AACA;AACAJ,kBAAcK,QAAQ,UAAR,EAAoBC,OAAlC;AACA,WAAON,WAAP;AACD;;AAED;;AAEA,MAAI,OAAOO,MAAP,KAAkB,WAAlB,IAAiC,OAAOA,OAAOC,iBAAd,KAAoC,QAAzE,EAAmF;AACjFR,kBAAcO,OAAOC,iBAArB;AACD,GAFD,MAEO;AACL;AACAC,YAAQC,IAAR,CAAa,yDAAb;AACAV,kBAAc,EAAd;AACD;;AAED,SAAOA,WAAP;AACD;;AAED;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8Be,SAASD,SAAT,CAAmBY,IAAnB,EAAyB;AACtC,QAAMC,QAAQ,OAAOD,IAAP,KAAgB,QAAhB,GAA2BA,KAAKE,KAAL,CAAW,GAAX,CAA3B,GAA6CF,IAA3D;;AAEA,MAAIC,MAAME,MAAN,KAAiB,CAArB,EAAwB;AACtB,UAAM,IAAIC,KAAJ,CACJ,iFADI,CAAN;AAGD;AACD,MAAIC,SAASf,iCAAb;AACA,OAAK,IAAIgB,IAAI,CAAb,EAAgBA,IAAIL,MAAME,MAA1B,EAAkCG,KAAK,CAAvC,EAA0C;AACxC,QAAID,WAAWE,SAAf,EAA0B;AACxB,YAAMC,eAAgB,6CAA4CP,MAAMQ,IAAN,CAAW,GAAX,CAAgB,IAAlF;AACA;AACA,UAAIlB,QAAQC,GAAR,CAAYkB,iBAAZ,KAAkC,MAAlC,IAA4CnB,QAAQC,GAAR,CAAYmB,oBAAZ,KAAqC,MAArF,EAA6F;AAC3F,cAAM,IAAIP,KAAJ,CACH,GAAEI,YAAa,gUADZ,CAAN;AAGD;AACD,YAAM,IAAIJ,KAAJ,CAAUI,YAAV,CAAN;AACD;AACDH,aAASA,OAAOJ,MAAMK,CAAN,CAAP,CAAT;AACD;AACD,SAAOD,MAAP;AACD","file":"index.js","sourceRoot":"/home/b-rave/Documents/jalaj/Frontend-Development","sourcesContent":["/**\n * Unified Configuration Reader\n *\n * This helper function allows you to use the same API in accessing configuration\n * values no matter where the code is being executed (i.e. browser/node).\n *\n * e.g.\n *   import config from '../config';\n *   config('welcomeMessage'); // => \"Hello World!\"\n */\n\n/* eslint-disable no-console */\n/* eslint-disable import/global-require */\n/* eslint-disable no-underscore-dangle */\n\n// PRIVATES\n\nlet configCache;\n\n/**\n * This resolves the correct configuration source based on the execution\n * environment.  For node we use the standard config file, however, for browsers\n * we need to access the configuration object that would have been bound to\n * the \"window\" by our \"reactApplication\" middleware.\n *\n * @return {Object} The executing environment configuration object.\n */\nfunction resolveConfigForBrowserOrServer() {\n  if (configCache) {\n    return configCache;\n  }\n\n  // NOTE: By using the \"process.env.BUILD_FLAG_IS_NODE\" flag here this block of code\n  // will be removed when \"process.env.BUILD_FLAG_IS_NODE === true\".\n  // If no \"BUILD_FLAG_IS_NODE\" env var is undefined we can assume that we are running outside\n  // of a webpack run, and will therefore return the config file.\n  if (\n    typeof process.env.BUILD_FLAG_IS_NODE === 'undefined' ||\n    process.env.BUILD_FLAG_IS_NODE === 'true'\n  ) {\n    // i.e. running in our server/node process.\n    // eslint-disable-next-line global-require\n    configCache = require('./values').default;\n    return configCache;\n  }\n\n  // To get here we are likely running in the browser.\n\n  if (typeof window !== 'undefined' && typeof window.__CLIENT_CONFIG__ === 'object') {\n    configCache = window.__CLIENT_CONFIG__;\n  } else {\n    // To get here we must be running in the browser.\n    console.warn('No client configuration object was bound to the window.');\n    configCache = {};\n  }\n\n  return configCache;\n}\n\n// EXPORT\n\n/**\n * This function wraps up the boilerplate needed to access the correct\n * configuration depending on whether your code will get executed in the\n * browser/node.\n *\n * i.e.\n *  - For the browser the config values are available at window.__CLIENT_CONFIG__\n *  - For a node process they are within the \"<root>/config\".\n *\n * To request a configuration value you must provide the repective path. For\n * example, f you had the following configuration structure:\n *   {\n *     foo: {\n *       bar: [1, 2, 3]\n *     },\n *     bob: 'bob'\n *   }\n *\n * You could use this function to access \"bar\" like so:\n *   import config from '../config';\n *   const value = config('foo.bar');\n *\n * And you could access \"bob\" like so:\n *   import config from '../config';\n *   const value = config('bob');\n *\n * If any part of the path isn't available as a configuration key/value then\n * an error will be thrown indicating that a respective configuration value\n * could not be found at the given path.\n */\nexport default function configGet(path) {\n  const parts = typeof path === 'string' ? path.split('.') : path;\n\n  if (parts.length === 0) {\n    throw new Error(\n      'You must provide the path to the configuration value you would like to consume.',\n    );\n  }\n  let result = resolveConfigForBrowserOrServer();\n  for (let i = 0; i < parts.length; i += 1) {\n    if (result === undefined) {\n      const errorMessage = `Failed to resolve configuration value at \"${parts.join('.')}\".`;\n      // This \"if\" block gets stripped away by webpack for production builds.\n      if (process.env.BUILD_FLAG_IS_DEV === 'true' && process.env.BUILD_FLAG_IS_CLIENT === 'true') {\n        throw new Error(\n          `${errorMessage} We have noticed that you are trying to access this configuration value from the client bundle (i.e. code that will be executed in a browser). For configuration values to be exposed to the client bundle you must ensure that the path is added to the client configuration filter in the project configuration values file.`,\n        );\n      }\n      throw new Error(errorMessage);\n    }\n    result = result[parts[i]];\n  }\n  return result;\n}\n"]}