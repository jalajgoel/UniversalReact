{"version":3,"sources":["shared/utils/logic/ifElse.js"],"names":["ifElse","execIfFunc","x","condition","then","or"],"mappings":";;;;;kBAkBwBA,M;AAlBxB,MAAMC,aAAaC,KAAM,OAAOA,CAAP,KAAa,UAAb,GAA0BA,GAA1B,GAAgCA,CAAzD;;AAEA;;;;;;;;;;;;;;;;AAgBe,SAASF,MAAT,CAAgBG,SAAhB,EAA2B;AACxC,SAAO,CAACC,IAAD,EAAOC,EAAP,KAAeJ,WAAWE,SAAX,IAAwBF,WAAWG,IAAX,CAAxB,GAA2CH,WAAWI,EAAX,CAAjE;AACD","file":"ifElse.js","sourceRoot":"/home/b-rave/Documents/jalaj/Frontend-Development","sourcesContent":["const execIfFunc = x => (typeof x === 'function' ? x() : x);\n\n/**\n * This is a higher order function that accepts a boolean condition and will\n * return a function allowing you to provide if/else values that should be\n * resolved based on the boolean condition.\n *\n * @param  {Boolean|() => Boolean} condition:\n *   The condition to test against. This can be a function for lazy resolution.\n *\n * @return {(X|() => X, Y|() => Y) => X|Y}\n *   A function where the first paramater is the \"if\" and the second paramater\n *   is the \"else\".  Each of these allows lazy resolving by providing a function.\n *\n * @example\n *   const ifDev = ifElse(process.env.NODE_ENV === 'development');\n *   ifDev('foo', () => 'lazy resolved');  // => 'foo'\n */\nexport default function ifElse(condition) {\n  return (then, or) => (execIfFunc(condition) ? execIfFunc(then) : execIfFunc(or));\n}\n"]}