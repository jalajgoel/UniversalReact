{"version":3,"sources":["server/middleware/security.js"],"names":["cspConfig","directives","childSrc","connectSrc","defaultSrc","imgSrc","fontSrc","objectSrc","mediaSrc","manifestSrc","scriptSrc","req","res","locals","nonce","styleSrc","cspExtensions","Object","keys","forEach","key","concat","process","env","BUILD_FLAG_IS_DEV","directive","push","nonceMiddleware","next","v4","securityMiddleware","xssFilter","frameguard","ieNoOpen","noSniff","contentSecurityPolicy"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,YAAY;AAChBC,cAAY;AACVC,cAAU,CAAC,QAAD,CADA;AAEV;AACA;AACA;AACAC,gBAAY,CAAC,GAAD,CALF,EAKS;AACnBC,gBAAY,CAAC,QAAD,CANF;AAOVC,YAAQ,CACN,QADM,CAPE;AAaVC,aAAS,CAAC,QAAD,EAAW,OAAX,CAbC;AAcVC,eAAW,CAAC,QAAD,CAdD;AAeVC,cAAU,CAAC,QAAD,CAfA;AAgBVC,iBAAa,CAAC,QAAD,CAhBH;AAiBVC,eAAW;AACT;AACA,YAFS;AAGT;AACA;AACA;AACA;AACA;AACA,KAACC,GAAD,EAAMC,GAAN,KAAe,UAASA,IAAIC,MAAJ,CAAWC,KAAM,GARhC;AAST;AACA;AACA;AACA;AACA,qBAbS,CAjBD;AAgCVC,cAAU,CACR,QADQ;AAER;AACA,qBAHQ,EAIR,OAJQ;AAhCA;AADI,CAAlB;;AA0CA;AACA,MAAMC,gBAAgB,sBAAO,eAAP,CAAtB;AACAC,OAAOC,IAAP,CAAYF,aAAZ,EAA2BG,OAA3B,CAAoCC,GAAD,IAAS;AAC1C,MAAIpB,UAAUC,UAAV,CAAqBmB,GAArB,CAAJ,EAA+B;AAC7BpB,cAAUC,UAAV,CAAqBmB,GAArB,IAA4BpB,UAAUC,UAAV,CAAqBmB,GAArB,EAA0BC,MAA1B,CAAiCL,cAAcI,GAAd,CAAjC,CAA5B;AACD,GAFD,MAEO;AACLpB,cAAUC,UAAV,CAAqBmB,GAArB,IAA4BJ,cAAcI,GAAd,CAA5B;AACD;AACF,CAND;;AAQA,IAAIE,QAAQC,GAAR,CAAYC,iBAAZ,KAAkC,MAAtC,EAA8C;AAC5C;AACA;AACAP,SAAOC,IAAP,CAAYlB,UAAUC,UAAtB,EAAkCkB,OAAlC,CAA2CM,SAAD,IAAe;AACvDzB,cAAUC,UAAV,CAAqBwB,SAArB,EAAgCC,IAAhC,CAAsC,GAAE,sBAAO,MAAP,CAAe,IAAG,sBAAO,qBAAP,CAA8B,EAAxF;AACD,GAFD;AAGD;;AAED;AACA;AACA;AACA,SAASC,eAAT,CAAyBhB,GAAzB,EAA8BC,GAA9B,EAAmCgB,IAAnC,EAAyC;AACvC;AACAhB,MAAIC,MAAJ,CAAWC,KAAX,GAAmB,eAAKe,EAAL,EAAnB;AACAD;AACD;;AAED,MAAME,qBAAqB,CACzBH,eADyB;;AAGzB;AACA;AACA,oBALyB;;AAOzB;AACA;AACA;AACA,iBAAOI,SAAP,EAVyB;;AAYzB;AACA;AACA,iBAAOC,UAAP,CAAkB,MAAlB,CAdyB;;AAgBzB;AACA;AACA;AACA,iBAAOC,QAAP,EAnByB;;AAqBzB;AACA;AACA;AACA;AACA,iBAAOC,OAAP,EAzByB;;AA2BzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAOC,qBAAP,CAA6BnC,SAA7B,CA/CyB,CAA3B;;kBAkDe8B,kB","file":"security.js","sourceRoot":"/home/spineor/Documents/risorso /newSetup_frontend/react-universally","sourcesContent":["import uuid from 'uuid';\nimport hpp from 'hpp';\nimport helmet from 'helmet';\nimport config from '../../config';\n\nconst cspConfig = {\n  directives: {\n    childSrc: [\"'self'\"],\n    // Note: Setting this to stricter than * breaks the service worker. :(\n    // I can't figure out how to get around this, so if you know of a safer\n    // implementation that is kinder to service workers please let me know.\n    connectSrc: ['*'], // [\"'self'\", 'ws:'],\n    defaultSrc: [\"'self'\"],\n    imgSrc: [\n      \"'self'\",\n      // If you use Base64 encoded images (i.e. inlined images), then you will\n      // need the following:\n      // 'data:',\n    ],\n    fontSrc: [\"'self'\", 'data:'],\n    objectSrc: [\"'self'\"],\n    mediaSrc: [\"'self'\"],\n    manifestSrc: [\"'self'\"],\n    scriptSrc: [\n      // Allow scripts hosted from our application.\n      \"'self'\",\n      // Note: We will execution of any inline scripts that have the following\n      // nonce identifier attached to them.\n      // This is useful for guarding your application whilst allowing an inline\n      // script to do data store rehydration (redux/mobx/apollo) for example.\n      // @see https://helmetjs.github.io/docs/csp/\n      (req, res) => `'nonce-${res.locals.nonce}'`,\n      // This is a know workaround for browsers that don't support nonces.\n      // It will be ignored by browsers that do support nonces as they will\n      // recognise that we have also provided a nonce configuration and\n      // use the stricter rule.\n      \"'unsafe-inline'\",\n    ],\n    styleSrc: [\n      \"'self'\",\n      // Webpack generates JS that loads our CSS, so this is needed:\n      \"'unsafe-inline'\",\n      'blob:',\n    ],\n  },\n};\n\n// Add any additional CSP from the static config.\nconst cspExtensions = config('cspExtensions');\nObject.keys(cspExtensions).forEach((key) => {\n  if (cspConfig.directives[key]) {\n    cspConfig.directives[key] = cspConfig.directives[key].concat(cspExtensions[key]);\n  } else {\n    cspConfig.directives[key] = cspExtensions[key];\n  }\n});\n\nif (process.env.BUILD_FLAG_IS_DEV === 'true') {\n  // When in development mode we need to add our secondary express server that\n  // is used to host our client bundle to our csp config.\n  Object.keys(cspConfig.directives).forEach((directive) => {\n    cspConfig.directives[directive].push(`${config('host')}:${config('clientDevServerPort')}`);\n  });\n}\n\n// Attach a unique \"nonce\" to every response.  This allows use to declare\n// inline scripts as being safe for execution against our content security policy.\n// @see https://helmetjs.github.io/docs/csp/\nfunction nonceMiddleware(req, res, next) {\n  // eslint-disable-next-line no-param-reassign\n  res.locals.nonce = uuid.v4();\n  next();\n}\n\nconst securityMiddleware = [\n  nonceMiddleware,\n\n  // Prevent HTTP Parameter pollution.\n  // @see http://bit.ly/2f8q7Td\n  hpp(),\n\n  // The xssFilter middleware sets the X-XSS-Protection header to prevent\n  // reflected XSS attacks.\n  // @see https://helmetjs.github.io/docs/xss-filter/\n  helmet.xssFilter(),\n\n  // Frameguard mitigates clickjacking attacks by setting the X-Frame-Options header.\n  // @see https://helmetjs.github.io/docs/frameguard/\n  helmet.frameguard('deny'),\n\n  // Sets the X-Download-Options to prevent Internet Explorer from executing\n  // downloads in your site’s context.\n  // @see https://helmetjs.github.io/docs/ienoopen/\n  helmet.ieNoOpen(),\n\n  // Don’t Sniff Mimetype middleware, noSniff, helps prevent browsers from trying\n  // to guess (“sniff”) the MIME type, which can have security implications. It\n  // does this by setting the X-Content-Type-Options header to nosniff.\n  // @see https://helmetjs.github.io/docs/dont-sniff-mimetype/\n  helmet.noSniff(),\n\n  // Content Security Policy\n  //\n  // If you are unfamiliar with CSPs then I highly recommend that you do some\n  // reading on the subject:\n  //  - https://content-security-policy.com/\n  //  - https://developers.google.com/web/fundamentals/security/csp/\n  //  - https://developer.mozilla.org/en/docs/Web/Security/CSP\n  //  - https://helmetjs.github.io/docs/csp/\n  //\n  // If you are relying on scripts/styles/assets from other servers (internal\n  // or external to your company) then you will need to explicitly configure\n  // the CSP below to allow for this.  For example you can see I have had to\n  // add the polyfill.io CDN in order to allow us to use the polyfill script.\n  // It can be a pain to manage these, but it's a really great habit to get\n  // in to.\n  //\n  // You may find CSPs annoying at first, but it is a great habit to build.\n  // The CSP configuration is an optional item for helmet, however you should\n  // not remove it without making a serious consideration that you do not\n  // require the added security.\n  helmet.contentSecurityPolicy(cspConfig),\n];\n\nexport default securityMiddleware;\n"]}